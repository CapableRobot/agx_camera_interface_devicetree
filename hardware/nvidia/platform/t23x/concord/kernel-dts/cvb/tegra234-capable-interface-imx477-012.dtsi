/*
  * Copyright (c) 2023, Capable Robot Components Inc. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation; either version 2 of the License, or
  * (at your option) any later version.
  *
  * This program is distributed in the hope that it will be useful, but WITHOUT
  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  * more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  */

#include <dt-bindings/media/camera.h>
#include <dt-bindings/gpio/tegra234-gpio.h>

#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)
#define CAM0_RST_L TEGRA234_MAIN_GPIO(H, 3)
#define CAM1_RST_L TEGRA234_MAIN_GPIO(AC, 1)

/ {
    tegra-capture-vi {
        status = "okay";
        num-channels = <3>;
        ports {
            #address-cells = <1>;
            #size-cells = <0>;
            status = "okay";
            port@0 {
                reg = <0>;
                status = "okay";
                imx477_vi_in0: endpoint {
                    status = "okay";
                    port-index = <0>;
                    bus-width = <2>;
                    remote-endpoint = <&imx477_csi_out0>;
                };
            };
            port@1 {
                reg = <1>;
                status = "okay";
                imx477_vi_in1: endpoint {
                    status = "okay";
                    port-index = <1>;
                    bus-width = <2>;
                    remote-endpoint = <&imx477_csi_out1>;
                };
            };
            port@2 {
                reg = <2>;
                status = "okay";
                imx477_vi_in2: endpoint {
                    status = "okay";
                    port-index = <2>;
                    bus-width = <2>;
                    remote-endpoint = <&imx477_csi_out2>;
                };
            };
        };
    };

    host1x@13e00000 {
        nvcsi@15a00000 {
            status = "okay";
            num-channels = <3>;
            #address-cells = <1>;
            #size-cells = <0>;
            channel@0 {
                reg = <0>;
                status = "okay";
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    status = "okay";
                    port@0 {
                        reg = <0>;
                        status = "okay";
                        imx477_csi_in0: endpoint@0 {
                            status = "okay";
                            port-index = <0>;
                            bus-width = <2>;
                            remote-endpoint = <&imx477_out0>;
                        };
                    };
                    port@1 {
                        reg = <1>;
                        status = "okay";
                        imx477_csi_out0: endpoint@1 {
                            status = "okay";
                            remote-endpoint = <&imx477_vi_in0>;
                        };
                    };
                };
            };
            channel@1 {
                reg = <1>;
                status = "okay";
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    status = "okay";
                    port@2 {
                        reg = <0>;
                        status = "okay";
                        imx477_csi_in1: endpoint@2 {
                            status = "okay";
                            port-index = <1>;
                            bus-width = <2>;
                            remote-endpoint = <&imx477_out1>;
                        };
                    };
                    port@3 {
                        reg = <1>;
                        status = "okay";
                        imx477_csi_out1: endpoint@3 {
                            status = "okay";
                            remote-endpoint = <&imx477_vi_in1>;
                        };
                    };
                };
            };
            channel@2 {
                reg = <2>;
                status = "okay";
                ports {
                    #address-cells = <1>;
                    #size-cells = <0>;
                    status = "okay";
                    port@2 {
                        reg = <0>;
                        status = "okay";
                        imx477_csi_in2: endpoint@4 {
                            status = "okay";
                            port-index = <2>;
                            bus-width = <2>;
                            remote-endpoint = <&imx477_out2>;
                        };
                    };
                    port@3 {
                        reg = <1>;
                        status = "okay";
                        imx477_csi_out2: endpoint@5 {
                            status = "okay";
                            remote-endpoint = <&imx477_vi_in2>;
                        };
                    };
                };
            };
        };
    };

    gpio@2200000 {
        camera-i2cmux-enable {
            status = "okay";
            gpio-hog;
            output-high;
            gpios = <CAM1_RST_L 0>;
            label = "camera-i2cmux-enable";
        };
    };

    fixed-regulators {
        regulator@106 {
            regulator-boot-on;
            regulator-always-on;
        };
    };

    i2c@3180000 {
        status =  "okay";

        pca9548: pca9548@70 {
            status = "okay";
            compatible = "nxp,pca9548";
            reg = <0x70>;
            #address-cells = <1>;
            #size-cells = <0>;
            force_bus_start = <CAMERA_I2C_MUX_BUS(0)>;
            vcc-supply = <&p3737_avdd_cam_2v8>;
            vcc-pullup-supply = <&battery_reg>;
            reset-gpios = <&tegra_main_gpio CAM1_RST_L GPIO_ACTIVE_LOW>;

            i2c@0 {
                status = "okay";
                reg = <0>;
                i2c-mux,deselect-on-exit;
                #address-cells = <1>;
                #size-cells = <0>;

                imx477_cam0: imx477_a@1a {
                    compatible = "ridgerun,imx477";
                    status = "okay";

                    // reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_LOW>;

                    /* I2C device address */
                    reg = <0x1a>;

                    /* V4L2 device node location */
                    devnode = "video0";

                    /* Physical dimensions of sensor */
                    physical_w = "3.680";
                    physical_h = "2.760";

                    sensor_model = "imx477";

                    use_sensor_mode_id = "true";

#undef TEGRA_SINTERFACE
#define TEGRA_SINTERFACE "serial_a"
#include "tegra234-p3737-0000-camera-imx477-modes.dtsi"

                    ports {
                        #address-cells = <1>;
                        #size-cells = <0>;
                        status = "okay";

                        port@0 {
                            reg = <0>;
                            status = "okay";
                            imx477_out0: endpoint {
                                status = "okay";
                                port-index = <0>;
                                bus-width = <2>;
                                remote-endpoint = <&imx477_csi_in0>;
                            };
                        };
                    };
                };
            };

            i2c@1 {
                status = "okay";
                reg = <1>;
                i2c-mux,deselect-on-exit;
                #address-cells = <1>;
                #size-cells = <0>;

                imx477_cam1: imx477_b@1a {
                    compatible = "ridgerun,imx477";
                    status = "okay";

                    // reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_LOW>;

                    /* I2C device address */
                    reg = <0x1a>;

                    /* V4L2 device node location */
                    devnode = "video1";

                    /* Physical dimensions of sensor */
                    physical_w = "3.680";
                    physical_h = "2.760";

                    sensor_model = "imx477";

                    use_sensor_mode_id = "true";

#undef TEGRA_SINTERFACE
#define TEGRA_SINTERFACE "serial_b"
#include "tegra234-p3737-0000-camera-imx477-modes.dtsi"

                    ports {
                        #address-cells = <1>;
                        #size-cells = <0>;
                        status = "okay";
                        port@0 {
                            reg = <0>;
                            status = "okay";
                            imx477_out1: endpoint {
                                status = "okay";
                                port-index = <1>;
                                bus-width = <2>;
                                remote-endpoint = <&imx477_csi_in1>;
                            };
                        };
                    };
                };
            };

            i2c@2 {
                status = "okay";
                reg = <2>;
                i2c-mux,deselect-on-exit;
                #address-cells = <1>;
                #size-cells = <0>;

                imx477_cam2: imx477_c@1a {
                    compatible = "ridgerun,imx477";
                    status = "okay";

                    // reset-gpios = <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_LOW>;

                    /* I2C device address */
                    reg = <0x1a>;

                    /* V4L2 device node location */
                    devnode = "video2";

                    /* Physical dimensions of sensor */
                    physical_w = "3.680";
                    physical_h = "2.760";

                    sensor_model = "imx477";

                    use_sensor_mode_id = "true";

#undef TEGRA_SINTERFACE
#define TEGRA_SINTERFACE "serial_c"
#include "tegra234-p3737-0000-camera-imx477-modes.dtsi"

                    ports {
                        #address-cells = <1>;
                        #size-cells = <0>;
                        status = "okay";
                        port@0 {
                            reg = <0>;
                            status = "okay";
                            imx477_out2: endpoint {
                                status = "okay";
                                port-index = <2>;
                                bus-width = <2>;
                                remote-endpoint = <&imx477_csi_in2>;
                            };
                        };
                    };
                };
            };
        };
    };
};

/ {
    tegra-camera-platform {
        compatible = "nvidia, tegra-camera-platform";

        /**
        * Physical settings to calculate max ISO BW
        *
        * num_csi_lanes = <>;
        * Total number of CSI lanes when all cameras are active
        *
        * max_lane_speed = <>;
        * Max lane speed in Kbit/s
        *
        * min_bits_per_pixel = <>;
        * Min bits per pixel
        *
        * vi_peak_byte_per_pixel = <>;
        * Max byte per pixel for the VI ISO case
        *
        * vi_bw_margin_pct = <>;
        * Vi bandwidth margin in percentage
        *
        * max_pixel_rate = <>;
        * Max pixel rate in Kpixel/s for the ISP ISO case
        *
        * isp_peak_byte_per_pixel = <>;
        * Max byte per pixel for the ISP ISO case
        *
        * isp_bw_margin_pct = <>;
        * Isp bandwidth margin in percentage
        */
        num_csi_lanes = <6>;
        max_lane_speed = <1500000>;
        min_bits_per_pixel = <10>;
        vi_peak_byte_per_pixel = <2>;
        vi_bw_margin_pct = <25>;
        max_pixel_rate = <7500000>;
        isp_peak_byte_per_pixel = <5>;
        isp_bw_margin_pct = <25>;
        tpg_max_iso = <3916800>;

        /**
         * The general guideline for naming badge_info contains 3 parts, and is as follows,
         * The first part is the camera_board_id for the module; if the module is in a FFD
         * platform, then use the platform name for this part.
         * The second part contains the position of the module, ex. "rear" or "front".
         * The third part contains the last 6 characters of a part number which is found
         * in the module's specsheet from the vendor.
         */
        modules {
            status = "okay";    
            module0 {
                badge = "nvidia_0_imx477";
                position = "0";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
                    devname = "imx477 30-001a";
                    proc-device-tree = "/proc/device-tree/i2c@3180000/pca9548@70/i2c@0/imx477_a@1a";
                };
            };
            module1 {
                badge = "nvidia_1_imx477";
                position = "1";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
                    devname = "imx477 31-001a";
                    proc-device-tree = "/proc/device-tree/i2c@3180000/pca9548@70/i2c@1/imx477_b@1a";
                };
            };
            module2 {
                badge = "nvidia_2_imx477";
                position = "2";
                orientation = "1";
                status = "okay";
                drivernode0 {
                    status = "okay";
                    pcl_id = "v4l2_sensor";
                    devname = "imx477 32-001a";
                    proc-device-tree = "/proc/device-tree/i2c@3180000/pca9548@70/i2c@2/imx477_c@1a";
                };
            };
        };
    };
 };
